namespace: nginx

common:
  metadata:
    publisher: monk.io
    email: jakub@monk.io
    tags: nginx, webserver, ssl, certbot
    icon: https://assets.monk.io/icons/nginx-logo-FF65602A76-seeklogo.com.png
    description: Standard webserver with a certbot container as sidecar to generate letsencrypt certificate
    name: NGINX Server with Certbot
    version: 1.0
    website: https://www.nginx.com/
    source: https://github.com/nginx/nginx

  variables:
    email:
      type: string
      value: do-not-reply@domain.com
    domain:
      type: string
      value: domain.com
    use-certbot:
      type: string
      value: true

  files:
    index-html:
      container: nginx
      path: /usr/share/nginx/html/index.html
      mode: 0644
      contents: <<< files/index.html

basic:
  defines: runnable
  inherits: /nginx/common

  containers:
    nginx:
      image-tag: latest
      image: nginx
      ports:
        - 80:80

ssl:
  defines: runnable
  inherits: nginx/basic

  connections:
    nginx:
      runnable: nginx/ssl
      service: nginx

  services:
    nginx:
      container: nginx
      port: 80
      protocol: tcp
      host-port: 80
    nginx-ssl:
      container: nginx
      port: 443
      protocol: tcp
      host-port: 443

  variables:
    nginx-hostname:
      type: string
      value: <- connection-hostname("nginx")
      env: NGINX_HOST

  files:
    config-init:
      container: nginx
      path: /tmp/init.conf
      mode: 0644
      contents: <<< files/letsencrypt_init.conf

    config-running:
      container: nginx
      path: /tmp/running.conf
      mode: 0644
      contents: <<< files/letsencrypt_running.conf

    entrypoint-nginx:
      container: nginx
      path: /docker-entrypoint.d/99-init-config.sh
      mode: 0755
      contents: <<< files/entrypoint-nginx.sh

    entrypoint-certbot:
      container: certbot
      path: /entrypoint.sh
      mode: 0755
      contents: <<< files/entrypoint-certbot.sh

  containers:
    nginx:
      ports:
        - 80:80
        - 443:443
      paths:
        - <- `${monk-volume-path}/certbot/conf:/etc/letsencrypt`
        - <- `${monk-volume-path}/certbot/www:/var/certbot`
      environment:
        - <- `USE_CERTBOT=${use-certbot}`

    certbot:
      image: certbot/certbot
      image-tag: latest
      paths:
        - <- `${monk-volume-path}/certbot/conf:/etc/letsencrypt`
        - <- `${monk-volume-path}/certbot/www:/var/certbot`
      bash: /entrypoint.sh
      environment:
        - <- `USE_CERTBOT=${use-certbot}`

reverse-proxy:
  defines: runnable
  metadata:
    publisher: monk.io
    email: jakub@monk.io
    tags: nginx, webserver, ssl, certbot, reverse proxy, proxy for services
    icon: https://assets.monk.io/icons/nginx-logo-FF65602A76-seeklogo.com.png
    description: |
      Nginx reverse proxy to use in conjuction with monk and connection system.

      Update in this runnable following variables:
        connection-name - with the connection name generated by monk
        http-port       - with the http port that you want nginx to be exposed as (default 80)
    name: nginx-reverse-proxy for monk connections
    shortname: nginx-reverse-proxy
    version: 1.0
    website: https://www.nginx.com/
    source: https://github.com/nginx/nginx
  services:
    http:
      container: nginx-reverse-proxy
      port: 1024
      protocol: tcp
      host-port: <- $http-port
  files:
    server-def:
      contents: |
        server {
          listen 0.0.0.0:1024;
          location / {
            proxy_set_header X-Real-IP  $remote_addr;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $host;
            proxy_pass http://{{ v "proxy-target-host" }}:{{ v "proxy-target-port" }};
          }
        }
      mode: 0644
      path: /etc/nginx/conf.d/default.conf
      container: nginx-reverse-proxy
  containers:
    nginx-reverse-proxy:
      image: nginx
      image-tag: latest
      ports:
        - <- `${http-port}:1024`
  variables:
    proxy-target-host:
      value: <- connection-hostname($connection-name)
      type: string
    proxy-target-port:
      value: <- connection-port($connection-name)
      type: string
    http-port:
      value: 80
      type: string
    connection-name:
      type: string
      value: default
